// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using electroinc_blood_bank.Models;

#nullable disable

namespace electroinc_blood_bank.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20240515164840_editeorderrr")]
    partial class editeorderrr
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("electroinc_blood_bank.Models.Blood", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("BloodRhAr")
                        .HasColumnType("int");

                    b.Property<int>("BloodRhEn")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Bloods");
                });

            modelBuilder.Entity("electroinc_blood_bank.Models.BloodBank", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("BloodBanks");
                });

            modelBuilder.Entity("electroinc_blood_bank.Models.BloodQuantity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("BloodBankID")
                        .HasColumnType("int");

                    b.Property<int>("BloodID")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BloodBankID");

                    b.HasIndex("BloodID");

                    b.ToTable("BloodQuantities");
                });

            modelBuilder.Entity("electroinc_blood_bank.Models.Donor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("BloodID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("ID");

                    b.HasIndex("BloodID");

                    b.ToTable("Donors");
                });

            modelBuilder.Entity("electroinc_blood_bank.Models.DonorHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("BloodBankID")
                        .HasColumnType("int");

                    b.Property<int>("BloodID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfDonation")
                        .HasColumnType("datetime2");

                    b.Property<int>("DonationAmout")
                        .HasColumnType("int");

                    b.Property<int>("DonorID")
                        .HasColumnType("int");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BloodBankID");

                    b.HasIndex("BloodID");

                    b.HasIndex("DonorID");

                    b.ToTable("DonorsHistory");
                });

            modelBuilder.Entity("electroinc_blood_bank.Models.Hospital", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("ID");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("electroinc_blood_bank.Models.Manager", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("BloodBankID")
                        .HasColumnType("int");

                    b.Property<string>("nameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("ID");

                    b.HasIndex("BloodBankID");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("electroinc_blood_bank.Models.Orders", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("BloodAmount")
                        .HasColumnType("int");

                    b.Property<int>("BloodID")
                        .HasColumnType("int");

                    b.Property<int?>("HospitalID")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReciptionistID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("orderFor")
                        .HasColumnType("int");

                    b.Property<int>("orderForID")
                        .HasColumnType("int");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("BloodID");

                    b.HasIndex("HospitalID");

                    b.HasIndex("ReciptionistID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("electroinc_blood_bank.Models.Patient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("BloodID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("ID");

                    b.HasIndex("BloodID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("electroinc_blood_bank.Models.Reciptionist", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("BloodBankId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Password")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("ID");

                    b.HasIndex("BloodBankId");

                    b.ToTable("Reciptionists");
                });

            modelBuilder.Entity("electroinc_blood_bank.Models.BloodQuantity", b =>
                {
                    b.HasOne("electroinc_blood_bank.Models.BloodBank", "BloodBank")
                        .WithMany("BloodQuantity")
                        .HasForeignKey("BloodBankID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("electroinc_blood_bank.Models.Blood", "Blood")
                        .WithMany()
                        .HasForeignKey("BloodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blood");

                    b.Navigation("BloodBank");
                });

            modelBuilder.Entity("electroinc_blood_bank.Models.Donor", b =>
                {
                    b.HasOne("electroinc_blood_bank.Models.Blood", "blood")
                        .WithMany()
                        .HasForeignKey("BloodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("blood");
                });

            modelBuilder.Entity("electroinc_blood_bank.Models.DonorHistory", b =>
                {
                    b.HasOne("electroinc_blood_bank.Models.BloodBank", "BloodBank")
                        .WithMany()
                        .HasForeignKey("BloodBankID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("electroinc_blood_bank.Models.Blood", "Blood")
                        .WithMany()
                        .HasForeignKey("BloodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("electroinc_blood_bank.Models.Donor", "Donor")
                        .WithMany("History")
                        .HasForeignKey("DonorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blood");

                    b.Navigation("BloodBank");

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("electroinc_blood_bank.Models.Manager", b =>
                {
                    b.HasOne("electroinc_blood_bank.Models.BloodBank", "BloodBank")
                        .WithMany()
                        .HasForeignKey("BloodBankID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodBank");
                });

            modelBuilder.Entity("electroinc_blood_bank.Models.Orders", b =>
                {
                    b.HasOne("electroinc_blood_bank.Models.Blood", "Blood")
                        .WithMany()
                        .HasForeignKey("BloodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("electroinc_blood_bank.Models.Hospital", null)
                        .WithMany("Orders")
                        .HasForeignKey("HospitalID");

                    b.HasOne("electroinc_blood_bank.Models.Reciptionist", "Reciptionist")
                        .WithMany()
                        .HasForeignKey("ReciptionistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blood");

                    b.Navigation("Reciptionist");
                });

            modelBuilder.Entity("electroinc_blood_bank.Models.Patient", b =>
                {
                    b.HasOne("electroinc_blood_bank.Models.Blood", "Blood")
                        .WithMany()
                        .HasForeignKey("BloodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blood");
                });

            modelBuilder.Entity("electroinc_blood_bank.Models.Reciptionist", b =>
                {
                    b.HasOne("electroinc_blood_bank.Models.BloodBank", "BloodBank")
                        .WithMany()
                        .HasForeignKey("BloodBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodBank");
                });

            modelBuilder.Entity("electroinc_blood_bank.Models.BloodBank", b =>
                {
                    b.Navigation("BloodQuantity");
                });

            modelBuilder.Entity("electroinc_blood_bank.Models.Donor", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("electroinc_blood_bank.Models.Hospital", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
